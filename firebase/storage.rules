rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/(default)/documents/admins/$(request.auth.uid));
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||
             request.resource.contentType.matches('text/plain');
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidImageFile();
    }
    
    // User documents (resumes, certificates)
    match /users/{userId}/documents/{fileName} {
      allow read: if isAuthenticated() && 
                     (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && 
                      isOwner(userId) && 
                      (isValidImageFile() || isValidDocumentFile()) &&
                      request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Resource images and attachments
    match /resources/{resourceId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && 
                      (isValidImageFile() || isValidDocumentFile()) &&
                      request.resource.size < 20 * 1024 * 1024; // 20MB limit
    }
    
    // System assets (logos, icons, etc.)
    match /system/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // Temporary uploads
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && 
                            isOwner(userId) &&
                            request.resource.size < 50 * 1024 * 1024; // 50MB limit
      allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
    }
    
    // Admin uploads
    match /admin/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Backup files
    match /backups/{fileName} {
      allow read, write: if isAdmin();
    }
    
    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
